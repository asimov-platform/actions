name: Rust CI

# WARNING! PLEASE READ BEFORE MAKING ANY CHANGES:
#
# This workflow is triggered on `pull_request_target` event,
# which makes it highly prone to security issues,
# as in this case we are executing untrusted, user-provided,
# potentially malicious code from pull requests in an environment
# that might contain overly permissive tokens or exposed secrets,
# if not implemented properly.
#
# Please only modify this file if you know what you're doing.

on:
  workflow_call:
    inputs:
      check_formatting:
        required: false
        type: boolean
        default: true
      build_linux:
        required: false
        type: boolean
        default: true
      linux_dependencies:
        required: false
        type: string
      build_macos:
        required: false
        type: boolean
        default: true
      macos_dependencies:
        required: false
        type: string
      build_windows:
        required: false
        type: boolean
        default: true
      windows_dependencies:
        required: false
        type: string
      check_lib:
        required: false
        type: boolean
        default: true
      check_bins:
        required: false
        type: boolean
        default: true
      check_tests:
        required: false
        type: boolean
        default: true
      check_examples:
        required: false
        type: boolean
        default: true
      check_doctests:
        required: false
        type: boolean
        default: true
      review_pr:
        required: false
        type: boolean
        default: true
    secrets:
      ASIMOV_APP_ID:
        required: true
      ASIMOV_APP_PRIVATE_KEY:
        required: true

permissions:
  contents: read

jobs:
  check-formatting:
    name: Check formatting
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
      - name: Install Rust
        id: install-rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: rustfmt
      - name: Check formatting
        run: cargo +${{ steps.install-rust.outputs.name }} fmt --all -- --check 2>/dev/null
  check-targets:
    strategy:
      fail-fast: false
      matrix:
        include:
          - enabled: ${{ inputs.build_linux }}
            name: Linux
            target: x86_64-unknown-linux-gnu
            os: ubuntu-24.04
          - enabled: ${{ inputs.build_macos }}
            name: macOS
            target: x86_64-apple-darwin
            os: macos-latest
          - enabled: ${{ inputs.build_windows }}
            name: Windows
            target: x86_64-pc-windows-gnu
            os: windows-latest
    name: Check ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    needs:
      - check-formatting
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
      - name: Install Linux dependencies
        if: ${{ matrix.name == 'Linux' }}
        run: ${{ inputs.linux_dependencies }}
      - name: Install macOS dependencies
        if: ${{ matrix.name == 'macOS' }}
        run: ${{ inputs.macos_dependencies }}
      - name: Install Windows dependencies
        if: ${{ matrix.name == 'Windows' }}
        run: ${{ inputs.windows_dependencies }}
      - name: Install Rust
        id: install-rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.85.0
          components: rustfmt
          targets: ${{ matrix.target }}
      - name: Build library
        id: check-lib
        if: ${{ inputs.check_lib }}
        run: cargo +${{ steps.install-rust.outputs.name }} check --target ${{ matrix.target }} --workspace --keep-going --lib
      - name: Build binaries
        id: check-bins
        if: ${{ inputs.check_bins }}
        run: cargo +${{ steps.install-rust.outputs.name }} check --target ${{ matrix.target }} --workspace --keep-going --bins
      - name: Build tests
        id: check-tests
        if: ${{ inputs.check_tests && steps.check-bins.outcome == 'success' }}
        run: cargo +${{ steps.install-rust.outputs.name }} check --target ${{ matrix.target }} --workspace --keep-going --tests
      - name: Build examples
        id: check-examples
        if: ${{ inputs.check_examples && steps.check-bins.outcome == 'success' }}
        run: cargo +${{ steps.install-rust.outputs.name }} check --target ${{ matrix.target }} --workspace --keep-going --examples
      - name: Run tests
        id: run-tests
        if: ${{ steps.check-tests.outcome == 'success' }}
        run: |
          cargo +${{ steps.install-rust.outputs.name }} test --target ${{ matrix.target }} --workspace --tests --no-fail-fast
      - name: Run doctests
        id: run-doctests
        if: ${{ inputs.check_doctests && steps.check-tests.outcome == 'success' }}
        run: |
          cargo +${{ steps.install-rust.outputs.name }} test --target ${{ matrix.target }} --workspace --doc --no-fail-fast
