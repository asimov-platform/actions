name: Rust CI

# WARNING! PLEASE READ BEFORE MAKING ANY CHANGES:
#
# This workflow is triggered on `pull_request_target` event,
# which makes it highly prone to security issues,
# as in this case we are executing untrusted, user-provided,
# potentially malicious code from pull requests in an environment
# that might contain overly permissive tokens or exposed secrets,
# if not implemented properly.
#
# Please only modify this file if you know what you're doing.

on:
  workflow_call:
    inputs:
      formatting_toolchain:
        required: false
        type: string
        default: stable
      building_toolchain:
        required: false
        type: string
        default: 1.85.0
      check_formatting:
        required: false
        type: boolean
        default: true
      build_whole_workspace:
        required: false
        type: boolean
        default: true
      build_linux:
        required: false
        type: boolean
        default: true
      linux_dependencies:
        required: false
        type: string
      build_macos:
        required: false
        type: boolean
        default: true
      macos_dependencies:
        required: false
        type: string
      build_windows:
        required: false
        type: boolean
        default: true
      windows_dependencies:
        required: false
        type: string
      additional_build_args:
        required: false
        type: string
      env:
        required: false
        type: string
      check_lib:
        required: false
        type: boolean
        default: true
      check_lib_no_default_features:
        required: false
        type: boolean
        default: false
      check_bins:
        required: false
        type: boolean
        default: true
      check_tests:
        required: false
        type: boolean
        default: true
      check_examples:
        required: false
        type: boolean
        default: true
      check_doctests:
        required: false
        type: boolean
        default: true
      review_pr:
        required: false
        type: boolean
        default: true
    secrets:
      ASIMOV_APP_ID:
        required: false
      ASIMOV_APP_PRIVATE_KEY:
        required: false
      ENV:
        required: false

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always

jobs:
  check-formatting:
    name: Check formatting
    if: ${{ inputs.check_formatting }}
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
      - name: Install Rust
        id: install-rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ inputs.formatting_toolchain }}
          components: rustfmt
      - name: Check formatting
        run: cargo +${{ steps.install-rust.outputs.name }} fmt --all -- --check --color always 2>/dev/null
  check-targets:
    strategy:
      fail-fast: false
      matrix:
        include:
          - enabled: ${{ inputs.build_linux }}
            name: Linux
            target: x86_64-unknown-linux-gnu
            os: ubuntu-24.04
            custom_step: ${{ inputs.linux_dependencies }}
          - enabled: ${{ inputs.build_macos }}
            name: macOS
            target: aarch64-apple-darwin
            os: macos-15
            custom_step: ${{ inputs.macos_dependencies }}
          - enabled: ${{ inputs.build_windows }}
            name: Windows
            target: x86_64-pc-windows-msvc
            os: windows-2025
            custom_step: ${{ inputs.windows_dependencies }}
    name: Check targets
    if: ${{ always() }}
    uses: asimov-platform/actions/.github/workflows/ci-rust-job.yaml@master
    secrets:
      ENV: ${{ secrets.ENV }}
    with:
      enabled: ${{ matrix.enabled }}
      name: ${{ matrix.name }}
      os: ${{ matrix.os }}
      target: ${{ matrix.target }}
      toolchain: ${{ inputs.building_toolchain }}
      build_whole_workspace: ${{ inputs.build_whole_workspace }}
      custom_step: ${{ matrix.custom_step }}
      additional_build_args: ${{ inputs.additional_build_args }}
      env: ${{ inputs.env }}
      check_lib: ${{ inputs.check_lib }}
      check_lib_no_default_features: ${{ inputs.check_lib_no_default_features }}
      check_bins: ${{ inputs.check_bins }}
      check_tests: ${{ inputs.check_tests }}
      check_examples: ${{ inputs.check_examples }}
      check_doctests: ${{ inputs.check_doctests }}
  review-pr:
    name: Review PR
    runs-on: ubuntu-24.04
    if: ${{ always() && inputs.review_pr && github.event_name == 'pull_request_target' }}
    needs: [check-formatting, check-targets]
    permissions:
      actions: read
      contents: read
      pull-requests: write
    steps:
      - name: Check if should obtain token
        id: check-token
        run: |
          if [ "${{ secrets.ASIMOV_APP_ID != '' }}" == "true" || \
                "${{ secrets.ASIMOV_APP_PRIVATE_KEY != '' }}" == "true" ]; then
            echo "obtain_token=true" >> $GITHUB_OUTPUT
          else
            echo "obtain_token=false" >> $GITHUB_OUTPUT
          fi
      - name: Obtain token
        uses: actions/create-github-app-token@v2
        if: ${{ steps.check-token.outputs.obtain_token == 'true' }}
        id: app-token
        with:
          app-id: ${{ secrets.ASIMOV_APP_ID }}
          private-key: ${{ secrets.ASIMOV_APP_PRIVATE_KEY }}
          permission-actions: read
          permission-contents: read
          permission-pull-requests: write
      - uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token || github.token }}
          script: |
            if (${{ needs.check-formatting.result != 'success' }} ||
                ${{ needs.check-targets.result != 'success' }}) {
              let FORMATTING_JOB_NAME = 'Check formatting';
              let response = undefined;

              let all_items = "";
              let failed_items = "";

              function get_job_url(job_id) {
                return `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}/job/${job_id}?check_suite_focus=true`;
              }

              function get_step_url(job_id, step_id) {
                let job_url = get_job_url(job_id);
                return `${job_url}#step:${step_id}:0`;
              }

              response = await github.rest.actions.listJobsForWorkflowRunAttempt({
                ...context.repo,
                run_id: context.runId,
                attempt_number: ${{ github.run_attempt }}
              });

              let formatting_job = response.data.jobs.find(job => job.name.includes(FORMATTING_JOB_NAME));
              if (formatting_job != undefined) {
                let succeed = formatting_job.conclusion == 'success' ? '✅' : '❌';
                let url = get_job_url(formatting_job.id);
                let text = `| All | Formatting | ${succeed} | [Details](${url}) |\n`;

                if (formatting_job.conclusion == 'failure') {
                  failed_items += text;
                }

                all_items += text;
              }

              for (let job of response.data.jobs) {
                // Turn "ci / ci / Check Windows" -> "Check Windows"
                let job_name = job.name.split(" / ").pop();

                if (job_name.startsWith('Check') && job.name != formatting_job.name) {
                  let platform = job_name.split(' ')[1];
                  for (let step of job.steps) {
                    if (step.name.startsWith('Build ') || step.name.startsWith('Run ')) {
                      let name = step.name;
                      let icon = '';
                      switch (step.conclusion) {
                        case 'success':
                          icon = '✅';
                          break;
                        case 'skipped':
                          icon = '⏩';
                          break;
                        case 'failure':
                        case 'cancelled':
                          icon = '❌';
                          break;
                        default:
                          // Should never reach here.
                          icon = '❓';
                          break;
                      }

                      let url = get_step_url(job.id, step.number);
                      let text = `| ${platform} | ${name} | ${icon} | [Details](${url}) |\n`;

                      if (step.conclusion == 'failure') {
                        failed_items += text;
                      }

                      all_items += text;
                    }
                  }
                }
              }

              let body = `
            ## ⚠️ CI failed

            <details>
            <summary>Show all</summary>

            | Platform | Name | Status | Details |
            | --- | --- | --- | --- |
            ${all_items}

            =============================================

            </details>

            | Platform | Name | Status | Details |
            | --- | --- | --- | --- |
            ${failed_items}
            `;

              await github.rest.pulls.createReview({
                ...context.repo,
                pull_number: context.issue.number,
                event: 'REQUEST_CHANGES',
                body: body,
              });
            } else {
              await github.rest.pulls.createReview({
                ...context.repo,
                pull_number: context.issue.number,
                event: 'APPROVE',
              });
            }
