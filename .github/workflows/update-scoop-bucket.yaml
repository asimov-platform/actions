# See: https://docs.github.com/en/actions/writing-workflows
---
name: Update Scoop bucket

on:
  workflow_call:
    inputs:
      version:
        required: false
        type: string
        default: ${{ github.ref_name }}
      assets:
        required: true
        type: string
    secrets:
      ASIMOV_APP_ID:
        required: true
      ASIMOV_APP_PRIVATE_KEY:
        required: true

jobs:
  update-scoop-bucket:
    name: Update Scoop bucket
    runs-on: windows-2022
    steps:
      - name: Obtain token for Scoop bucket
        uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ secrets.ASIMOV_APP_ID }}
          private-key: ${{ secrets.ASIMOV_APP_PRIVATE_KEY }}
          permission-contents: write
          owner: asimov-platform
          repositories: scoop-bucket
      - name: Obtain token for current repository
        uses: actions/create-github-app-token@v2
        id: current-app-token
        with:
          app-id: ${{ secrets.ASIMOV_APP_ID }}
          private-key: ${{ secrets.ASIMOV_APP_PRIVATE_KEY }}
          permission-contents: read
      - name: Set github credentials
        shell: bash
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          user_id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)
          git config --global user.name '${{ steps.app-token.outputs.app-slug }}'
          git config --global user.email '${user_id}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com'
      - name: Install scoop
        shell: pwsh
        run: |
          Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser
          irm get.scoop.sh | iex
          Join-Path (Resolve-Path ~).Path "scoop\shims" >> $env:GITHUB_PATH
      - name: Install hub
        run: scoop install hub
      - name: Checkout Scoop bucket
        uses: actions/checkout@v4
        with:
          submodules: recursive
          repository: asimov-platform/scoop-bucket
          token: ${{ steps.app-token.outputs.token }}
      - name: Update
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          GH_TOKEN: ${{ steps.current-app-token.outputs.token }}
        run: |
          $assets = echo '${{ inputs.assets }}' | ConvertFrom-Json
          $packages = $assets | Where-Object { $_.name.EndsWith('.zip') }
          $need_push = $false

          foreach ($asset in $packages) {
            Write-Host "Processing $($asset.name)"
            $manifest_name = $asset.name -replace '-windows-x64\.zip$', ''
            $manifest_path = "./bucket/$manifest_name.json"

            if (Test-Path -Path $manifest_path) {
              # If file exists, just update it
              ./bin/auto-pr.ps1 -app $manifest_name -push
              continue
            }

            # If manifest doesn't exist, create it!

            $binary_path = Join-Path "${{ runner.temp }}" $asset.name
            Invoke-WebRequest -Uri $($asset.url) `
              -Headers @{
                  "Accept" = "application/octet-stream"
                  "Authorization" = "Bearer ${{ steps.current-app-token.outputs.token }}"
              } `
              -OutFile $binary_path

            function Get-Zip-Entries {
              param (
                [string] $zipPath
              )

              $zip = [IO.Compression.ZipFile]::OpenRead($zipPath)
              $entries = $zip.Entries
              $zip.Dispose()

              return $entries
            }

            $binaries = Get-Zip-Entries $binary_path
            $description = $(gh repo view ${{ github.repository }} --json description --jq .description)
            $manifest = [ordered]@{
              "version" = '${{ inputs.version }}'
              "description" = $description
              "homepage" = 'https://github.com/${{ github.repository }}'
              "license" = 'Unlicense'
              "architecture" = @{
                "64bit" = [ordered]@{
                  "url" = $asset.browser_download_url
                  "hash" = $asset.digest
                }
              }
              "bin" = $binaries | ForEach-Object { $_.FullName }
              "checkver" = [ordered]@{
                "url" = 'https://github.com/${{ github.repository }}/releases'
                "regex" = 'releases/tag/v?([\d.]+)'
              }
              "autoupdate" = @{
                "architecture" = @{
                  "64bit" = [ordered]@{
                    "url" = "https://github.com/${{ github.repository }}/releases/download/`$version/$($asset.name)"
                    "hash" = [ordered]@{
                      "url" = '$url.sha256'
                      "regex" = '([a-fA-F0-9]{32,128})[\x20\t]+.*`$basename(?:[\x20\t]+\d+)?'
                    }
                  }
                }
              }
            }

            $manifest_json = ConvertTo-Json $manifest -Depth 100
            Set-Content -Path $manifest_path -Value $manifest_json

            git add $manifest_path
            git commit -m "Add $manifest_name"
            $need_push = $true
          }

          if (-Not $need_push) {
            Write-Output "No changes to commit"
            exit 0
          }

          # Try to push the changes

          $WAIT_SECONDS = 5
          $MAX_RETRIES = 5
          $RETRIES = 0

          while ($RETRIES -lt $MAX_RETRIES) {
              Write-Host "Trying to push changes... (attempt $RETRIES)"
              git pull --rebase
              git push

              if ($LASTEXITCODE -eq 0) {
                  Write-Host "Push succeeded."
                  break
              }

              Write-Host "Push failed. Retrying in $WAIT_SECONDS seconds..."
              Start-Sleep -Seconds $WAIT_SECONDS
              $RETRIES++
          }

          # Check if we exhausted all retries
          if ($RETRIES -eq $MAX_RETRIES) {
              Write-Host "ERROR: Failed to push after $MAX_RETRIES attempts"
              exit 1
          }
