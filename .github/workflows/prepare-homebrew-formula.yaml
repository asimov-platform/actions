# See: https://docs.github.com/en/actions/writing-workflows
---
name: Prepare Homebrew formula

on:
  workflow_call:
    inputs:
      version:
        required: false
        type: string
        default: ${{ github.ref_name }}
      tap_owner:
        required: false
        type: string
        description: Homebrew tap owner
        default: ${{ github.repository_owner }}
      tap_name:
        required: false
        type: string
        description: Homebrew tap name
        default: tap
      formula_owner:
        required: false
        type: string
        default: ${{ github.repository_owner }}
      formula_name:
        required: false
        type: string
        default: ${{ github.event.repository.name }}
      depends_on_openssl:
        required: false
        type: boolean
        default: false
    outputs:
      bump_formula:
        value: ${{ jobs.update-homebrew-tap.outputs.bump_formula }}
    secrets:
      ASIMOV_APP_ID:
        required: true
      ASIMOV_APP_PRIVATE_KEY:
        required: true

jobs:
  update-homebrew-tap:
    name: Prepare Homebrew
    runs-on: ubuntu-22.04
    outputs:
      bump_formula: ${{ steps.check-formula.outputs.exists == 'true' }}
    steps:
      - name: Obtain token for Homebrew tap
        uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ secrets.ASIMOV_APP_ID }}
          private-key: ${{ secrets.ASIMOV_APP_PRIVATE_KEY }}
          owner: ${{ inputs.tap_owner }}
          repositories: homebrew-${{ inputs.tap_name }}
          permission-contents: write
      - name: Check formula
        id: check-formula
        shell: bash
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          if [ "$(gh api repos/${{ inputs.tap_owner }}/homebrew-${{ inputs.tap_name }}/contents/Formula/${{ inputs.formula_name }}.rb | jq 'has("size")')" = "true" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
      - name: Set github credentials
        if: ${{ steps.check-formula.outputs.exists == 'false' }}
        shell: bash
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          user_id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)
          git config --global user.name '${{ steps.app-token.outputs.app-slug }}'
          git config --global user.email '${user_id}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com'
      - name: Setup Homebrew
        id: set-up-homebrew
        if: ${{ steps.check-formula.outputs.exists == 'false' }}
        uses: Homebrew/actions/setup-homebrew@main
        with:
          token: ${{ steps.app-token.outputs.token }}
      - name: Create formula
        if: ${{ steps.check-formula.outputs.exists == 'false' }}
        shell: pwsh
        env:
          DEPENDS_ON_OPENSSL: ${{ inputs.depends_on_openssl }}
        run: |
          echo "HOMEBREW_NO_ENV_HINTS=TRUE" >> $GITHUB_ENV
          brew tap ${{ inputs.tap_owner }}/${{ inputs.tap_name }}

          function ConvertTo-PascalCase {
            param (
              [string]$KebabCaseString
            )

            if ([string]::IsNullOrWhiteSpace($KebabCaseString)) {
              return $null
            }

            # Split the string by hyphens
            $words = $KebabCaseString.Split('-')

            # Capitalize the first letter of each word and join them
            $pascalCaseWords = $words | ForEach-Object {
              $firstChar = $_[0].ToString().ToUpper()
              $restOfWord = $_.Substring(1).ToLower()
              "$firstChar$restOfWord"
            }

            return ($pascalCaseWords -join '')
          }

          $tag_url = "https://github.com/${{ github.repository }}/archive/refs/tags/${{ inputs.version }}.tar.gz"
          $tag_path = Join-Path "${{ runner.temp }}" "${{ github.event.repository.name }}.tar.gz"
          Invoke-WebRequest -Uri $tag_url -OutFile $tag_path
          $sha256 = (Get-FileHash -Path $tag_path -Algorithm SHA256).Hash.ToLower()

          $deps = 'depends_on "rust" => :build'
          if ($env:DEPENDS_ON_OPENSSL -eq 'true') {
              $deps += "`n" + 'depends_on "openssl" => :build'
          }

          $formula = @'
          class {0} < Formula
            desc "{1}"
            homepage "{2}"
            url "{3}"
            sha256 "{4}"
            license "Unlicense"
            head "{5}", branch: "master"

            livecheck do
              url :stable
              strategy :github_latest
            end

          {6}

            def install
              system "cargo", "install", *std_cargo_args
            end

            test do
              assert true
            end
          end
          '@ -f `
            (ConvertTo-PascalCase -KebabCaseString ${{ inputs.formula_name }}), `
            "To Be Filled", `
            "https://github.com/${{ github.repository }}", `
            $tag_url, `
            $sha256, `
            "https://github.com/${{ github.repository }}.git", `
            ($deps -replace "(?m)^", "  ") # indent

          cd "$(brew --repository ${{ inputs.tap_owner }}/${{ inputs.tap_name }})"

          $path = Join-Path "Formula" "${{ inputs.formula_name }}.rb"
          Set-Content -Path $path -Value $formula

          git add $path
          git commit -m "${{ inputs.formula_name }} add ${{ inputs.version }} formula."

          $WAIT_SECONDS = 5
          $MAX_RETRIES = 15
          $RETRIES = 0

          # Try to push the changes
          while ($RETRIES -lt $MAX_RETRIES) {
              Write-Host "Trying to push changes... (attempt $RETRIES)"
              git pull --rebase
              git push

              if ($LASTEXITCODE -eq 0) {
                  Write-Host "Push succeeded."
                  break
              }

              Write-Host "Push failed. Retrying in $WAIT_SECONDS seconds..."
              Start-Sleep -Seconds $WAIT_SECONDS
              $RETRIES++
          }

          # Check if we exhausted all retries
          if ($RETRIES -eq $MAX_RETRIES) {
              Write-Host "ERROR: Failed to push after $MAX_RETRIES attempts"
              exit 1
          }
