# See: https://docs.github.com/en/actions/writing-workflows
---
name: Rust CI job

# WARNING! PLEASE READ BEFORE MAKING ANY CHANGES:
#
# This workflow is triggered on `pull_request_target` event,
# which makes it highly prone to security issues,
# as in this case we are executing untrusted, user-provided,
# potentially malicious code from pull requests in an environment
# that might contain overly permissive tokens or exposed secrets,
# if not implemented properly.
#
# Please only modify this file if you know what you're doing.

on:
  workflow_call:
    inputs:
      enabled:
        required: true
        type: boolean
      name:
        required: true
        type: string
      os:
        required: true
        type: string
      target:
        required: true
        type: string
      toolchain:
        required: true
        type: string
      build_whole_workspace:
        required: false
        type: boolean
        default: true
      custom_step:
        required: false
        type: string
      additional_build_args:
        required: false
        type: string
      check_lib:
        required: true
        type: boolean
      check_lib_no_default_features:
        required: false
        type: boolean
        default: false
      check_bins:
        required: true
        type: boolean
      check_tests:
        required: true
        type: boolean
      check_examples:
        required: true
        type: boolean
      check_doctests:
        required: true
        type: boolean

env:
  CARGO_TERM_COLOR: always

jobs:
  check-targets:
    name: Check ${{ inputs.name }}
    if: ${{ inputs.enabled }}
    runs-on: ${{ inputs.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
      - name: Install dependencies
        if: ${{ inputs.custom_step != '' }}
        run: ${{ inputs.custom_step }}
      - name: Install Rust
        id: install-rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ inputs.toolchain }}
          targets: ${{ inputs.target }}
      - name: Prepare
        id: prepare
        shell: bash
        run: |
          if ${{ inputs.build_whole_workspace }}; then
            echo "workspace=--workspace" >> $GITHUB_OUTPUT
          else
            echo "workspace=" >> $GITHUB_OUTPUT
          fi
      - name: Build library
        id: check-lib
        if: ${{ inputs.check_lib }}
        run: cargo +${{ steps.install-rust.outputs.name }} build --target ${{ inputs.target }} ${{ steps.prepare.outputs.workspace }} --keep-going --lib ${{ inputs.additional_build_args }}
      - name: Build library (no default features)
        id: check-lib-no-default-features
        if: ${{ inputs.check_lib_no_default_features }}
        run: cargo +${{ steps.install-rust.outputs.name }} build --target ${{ inputs.target }} ${{ steps.prepare.outputs.workspace }} --keep-going --lib --no-default-features ${{ inputs.additional_build_args }}
      - name: Build binaries
        id: check-bins
        if: ${{ inputs.check_bins }}
        run: cargo +${{ steps.install-rust.outputs.name }} build --target ${{ inputs.target }} ${{ steps.prepare.outputs.workspace }} --keep-going --bins ${{ inputs.additional_build_args }}
      - name: Build tests
        id: check-tests
        if: ${{ inputs.check_tests && steps.check-bins.outcome == 'success' }}
        run: cargo +${{ steps.install-rust.outputs.name }} build --target ${{ inputs.target }} ${{ steps.prepare.outputs.workspace }} --keep-going --tests ${{ inputs.additional_build_args }}
      - name: Build examples
        id: check-examples
        if: ${{ inputs.check_examples && steps.check-bins.outcome == 'success' }}
        run: cargo +${{ steps.install-rust.outputs.name }} build --target ${{ inputs.target }} ${{ steps.prepare.outputs.workspace }} --keep-going --examples ${{ inputs.additional_build_args }}
      - name: Run tests
        id: run-tests
        if: ${{ steps.check-tests.outcome == 'success' }}
        run: |
          cargo +${{ steps.install-rust.outputs.name }} test --target ${{ inputs.target }} ${{ steps.prepare.outputs.workspace }} --tests --no-fail-fast
      - name: Run doctests
        id: run-doctests
        if: ${{ inputs.check_doctests && steps.check-tests.outcome == 'success' }}
        run: |
          cargo +${{ steps.install-rust.outputs.name }} test --target ${{ inputs.target }} ${{ steps.prepare.outputs.workspace }} --doc --no-fail-fast
